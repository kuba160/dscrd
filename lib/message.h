/*
 *     dscrd: Discord C library
 *     Copyright (C) 2018 Jakub Wasylk√≥w
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/// @cond INTERNAL
/// @endcond
// PUBLIC_API_BEGIN

typedef struct DiscordMessage_s {
	/// message ID
	char id[21];
	/// reserved
	uint8_t _type;
	/// channel ID
	char channel_id[21];
	/// author
	DiscordUser *author;
	/// contents of the message
	char *content;
	/// when this message was sent
	char *timestamp;
	/// when this message was edited (or null if never)
	char *edited_timestamp;
	/// whether this was a TTS message
	bool tts;
	/// whether this message mentions everyone
	bool mention_everyone;
	/// users specifically mentioned in the message
	DiscordUser **mentions;
	/// roles specifically mentioned in this message
	// TODO roles type //mention_roles
	/// array of attachment objects	any attached files
	// todo //attachments
	///
	// embeds
	/// reactions to the message
	// reactions
	/// used for validating a message was sent
	char nonce[21];
	/// whether this message is pinned
	bool pinned;
	/// if the message is generated by a webhook, this is the webhook's id
	char webhook_id[21];
	/// type of message
	int type;

	// sent with Rich Presence-related chat embeds:
	// activity
	// application

	DiscordClient *discord_client;

} DiscordMessage;

enum message_types {
DEFAULT, RECIPIENT_ADD, RECIPIENT_REMOVE, CALL,
CHANNEL_NAME_CHANGE, CHANNEL_ICON_CHANGE, CHANNEL_PINNED_MESSAGE, GUILD_MEMBER_JOIN
};

/**
 * Enables callback for all received messages. Needs gateway. Given callback function
 * takes a @ref DiscordMessage pointer as an argument and should return 0 on success.
 * If you want to stop receiving messages, simply return an integer other than 0.
 * @param client @ref DiscordClient session
 * @param callback callback function with template (int)(@ref DiscordMessage *)
 * @returns 0 on success
 * @returns NOT 0 on failure
 * @see DiscordMessage_callback_mentions
 */
int DiscordMessage_callback_all (DiscordClient *client, int (*callback)(DiscordMessage *));


/**
 * Enables callback for messages that mention user of this client. Needs gateway. Given callback function
 * takes a @ref DiscordMessage pointer as an argument and should return 0 on success.
 * If you want to stop receiving messages, simply return an integer other than 0.
 * @param client @ref DiscordClient session
 * @param callback callback function with template (int)(@ref DiscordMessage *)
 * @returns 0 on success
 * @returns NOT 0 on failure
 * @see DiscordMessage_callback_mentions
 */
int DiscordMessage_callback_mentions (DiscordClient *client, int (*callback)(DiscordMessage *));

/**
 * Deletes message in specific channel and specific id. Function will fail if you don't have correct permissions.
 * This function does not free @ref DiscordMessage pointer.
 * @param message @ref DiscordMessage pointer
 * @returns 0 on success
 * @returns NOT 0 on failure
 */
int DiscordMessage_delete_id (DiscordClient *client, const char *channel_id, const char *message_id);

/**
 * Deletes specific message. Function will fail if you don't have correct permissions.
 * This function does not free @ref DiscordMessage pointer.
 * @param message @ref DiscordMessage pointer
 * @returns 0 on success
 * @returns NOT 0 on failure
 */
int DiscordMessage_delete (DiscordMessage *message);

/**
 * Creates new message and returns it as a @ref DiscordMessage pointer.
 * @param message @ref DiscordMessage pointer
 * @returns @ref DiscordMessage pointer on success
 * @returns @b NULL on failure
 * @see DiscordChannel_send_message_simple
 */
DiscordMessage * DiscordMessage_new_simple (DiscordChannel *channel, const char *message);

/**
 * Frees @ref DiscordMessage pointer.
 * @param msg @ref DiscordMessage pointer
 */
void DiscordMessage_destroy (DiscordMessage *msg);

/**
 * Returns a @ref DiscordMessage pointer based on given channel and id.
 * @param channel @ref DiscordChannel pointer
 * @param message_id ID of the message to return
 * @returns @ref DiscordMessage pointer on success
 * @returns @b NULL on failure
 */
DiscordMessage * DiscordMessage_get (DiscordChannel *channel, char *message_id);

// PUBLIC_API_END